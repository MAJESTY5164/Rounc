const { Client, GatewayIntentBits } = require('discord.js');
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

const TOKEN = 'MTMwOTU3Nzc2MTg5OTI4MjQ5Mw.GJMJ6y.npa-PuqNg4clEd5VpEwF64aPO8LrNhkx2rJX6g';  // Replace with your bot token
const PREMIUM_ROLE_ID = '1307052906540957788';
var CanUseBot = [
    '549104375927406614', // MAJESTY
    '1287475111967981589', // Light
]

client.once('ready', () => {
  console.log('Bot is online!');
});

client.on('messageCreate', async message => {
    if (message.author.bot) {
        return;  // Ignore messages sent by bots
    }

    function Allowed() {
        if (CanUseBot.includes(message.author.id)) {
            return(true)
        }else {
            message.reply("You aren't authorized to use this command.")
        }
    }



    if (message.content === '!ping') {
      // Send a "Pong!" message first
      const sentMessage = await message.channel.send('Pong!');
    
        // Get the bot's latency and calculate the delay
        const botLatency = client.ws.ping;
    
        // Modify the "Pong!" message to include the bot's latency
        sentMessage.edit(`Pong! | Latency is ${botLatency}ms`);
  }

  if (message.content.startsWith('!premium add')) {
    if (Allowed()) {
    const args = message.content.split(' ');

    // Ensure the user ID is provided
    if (args.length < 3) {
      return message.reply('Usage: !premium add <user_id>');
    }

    const userId = args[2];
    const user = await message.guild.members.fetch(userId).catch(err => message.reply('User not found.'));
    const role = message.guild.roles.cache.get(PREMIUM_ROLE_ID);

    if (!user) return message.reply('User not found.');
    if (!role) return message.reply('Role not found.');

    // Add the role to the user
    try {
      await user.roles.add(role);
      message.reply(`Successfully added the premium role to <@${userId}>.`);
    } catch (error) {
      message.reply('There was an error adding the role.');
      console.error(error);
    }
  }}

  // Command: !premium remove <user_id>
  if (message.content.startsWith('!premium remove')) {
    if (Allowed()) {
    const args = message.content.split(' ');

    // Ensure the user ID is provided
    if (args.length < 3) {
      return message.reply('Usage: !premium remove <user_id>');
    }

    const userId = args[2];
    const user = await message.guild.members.fetch(userId).catch(err => message.reply('User not found.'));
    const role = message.guild.roles.cache.get(PREMIUM_ROLE_ID);

    if (!user) return message.reply('User not found.');
    if (!role) return message.reply('Role not found.');

    // Remove the role from the user
    try {
      await user.roles.remove(role);
      message.reply(`Successfully removed the premium role from <@${userId}>.`);
    } catch (error) {
      message.reply('There was an error removing the role.');
      console.error(error);
    }
  }}
});

client.login(TOKEN);
